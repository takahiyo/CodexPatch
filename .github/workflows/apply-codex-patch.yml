name: Codexパッチ適用

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'パッチを適用するブランチ名'
        required: true
        default: 'main'
      source_branch:
        description: 'パッチファイルを取得するブランチ名（省略時はワークフローを実行したブランチ）'
        required: false
        default: ''
      patch_file:
        description: 'リポジトリルートからのパッチファイルへのパス（例: patch）'
        required: true
        default: 'patch'

jobs:
  apply-patch:
    runs-on: ubuntu-latest

    steps:
      - name: ターゲットブランチをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch }}
          fetch-depth: 0

      - name: パッチファイルを取得
        env:
          PATCH_FILE: ${{ github.event.inputs.patch_file }}
          SOURCE_BRANCH_INPUT: ${{ github.event.inputs.source_branch }}
          DEFAULT_SOURCE_BRANCH: ${{ github.ref_name }}
        run: |
          SOURCE_BRANCH="$SOURCE_BRANCH_INPUT"
          if [ -z "$SOURCE_BRANCH" ]; then
            SOURCE_BRANCH="$DEFAULT_SOURCE_BRANCH"
          fi

          SOURCE_BRANCH="${SOURCE_BRANCH#refs/heads/}"
          SOURCE_BRANCH="${SOURCE_BRANCH#origin/}"

          if ! git ls-remote --exit-code origin "refs/heads/$SOURCE_BRANCH" > /dev/null; then
            echo "指定されたソースブランチ $SOURCE_BRANCH が origin に存在しません。" >&2
            exit 1
          fi

          git fetch origin "$SOURCE_BRANCH"

          PATCH_PATH="$RUNNER_TEMP/codex.patch"
          if ! git show "origin/$SOURCE_BRANCH:$PATCH_FILE" > "$PATCH_PATH"; then
            echo "ブランチ $SOURCE_BRANCH に $PATCH_FILE が存在しません。" >&2
            exit 1
          fi

          echo "パッチファイルを $SOURCE_BRANCH から取得しました。"
          echo "SOURCE_BRANCH=$SOURCE_BRANCH" >> "$GITHUB_ENV"
          echo "PATCH_PATH=$PATCH_PATH" >> "$GITHUB_ENV"

      - name: パッチのサマリーを表示
        env:
          PATCH_PATH: ${{ env.PATCH_PATH }}
        run: git apply --stat "$PATCH_PATH"

      - name: パッチを適用
        env:
          PATCH_PATH: ${{ env.PATCH_PATH }}
        run: git apply --apply --whitespace=fix "$PATCH_PATH"

      - name: 作業ツリーの状態を表示
        run: git status --short

      - name: Run tests (optional)
        if: false
        run: |
          echo "必要に応じてテストコマンドを有効化してください"

      - name: コミットを作成
        run: |
          if [ -z "$(git status --short)" ]; then
            echo "HAS_CHANGES=false" >> "$GITHUB_ENV"
            echo "パッチ適用後の差分がありません。コミットをスキップします。"
            exit 0
          fi
          echo "HAS_CHANGES=true" >> "$GITHUB_ENV"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add -A
          git commit -m "Apply Codex patch"

      - name: プッシュ先ブランチを決定
        if: env.HAS_CHANGES == 'true'
        env:
          TARGET_BRANCH: ${{ github.event.inputs.target_branch }}
          DISPATCH_BRANCH: ${{ github.ref_name }}
        run: |
          PUSH_BRANCH="$TARGET_BRANCH"
          if [ "$TARGET_BRANCH" != "$DISPATCH_BRANCH" ]; then
            PUSH_BRANCH="codex-patch/${GITHUB_RUN_ID}"
            echo "ターゲットブランチとワークフローブランチが異なるため、$PUSH_BRANCH にプッシュします。"
          else
            echo "ターゲットブランチに直接プッシュします。"
          fi
          echo "PUSH_BRANCH=$PUSH_BRANCH" >> "$GITHUB_ENV"

      - name: 変更をプッシュ
        if: env.HAS_CHANGES == 'true'
        env:
          TARGET_BRANCH: ${{ github.event.inputs.target_branch }}
          PUSH_BRANCH: ${{ env.PUSH_BRANCH }}
        run: |
          if [ "$PUSH_BRANCH" = "$TARGET_BRANCH" ]; then
            if ! git show-ref --verify --quiet "refs/remotes/origin/$TARGET_BRANCH"; then
              echo "指定されたブランチ $TARGET_BRANCH が存在しません" >&2
              exit 1
            fi
          fi
          git push origin HEAD:"$PUSH_BRANCH"

      - name: Pull Request を作成
        if: env.HAS_CHANGES == 'true' && github.event.inputs.target_branch != github.ref_name
        uses: actions/github-script@v7
        env:
          TARGET_BRANCH: ${{ github.event.inputs.target_branch }}
          SOURCE_BRANCH_FOR_PATCH: ${{ env.SOURCE_BRANCH }}
          PATCH_FILE_PATH: ${{ github.event.inputs.patch_file }}
          PUSH_BRANCH: ${{ env.PUSH_BRANCH }}
        with:
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const headRef = `${owner}:${process.env.PUSH_BRANCH}`;
            const baseRef = process.env.TARGET_BRANCH;

            const existing = await github.rest.pulls.list({
              owner,
              repo,
              head: headRef,
              base: baseRef,
              state: 'open'
            });

            if (existing.data.length > 0) {
              core.info(`既存の Pull Request (${existing.data[0].html_url}) が見つかりました。新規作成は行いません。`);
              return;
            }

            const title = 'Apply Codex patch';
            const body = [
              '自動適用された Codex パッチを確認してください。',
              `- 元ブランチ: ${process.env.GITHUB_REF_NAME}`,
              `- パッチ取得ブランチ: ${process.env.SOURCE_BRANCH_FOR_PATCH}`,
              `- 適用ブランチ: ${baseRef}`,
              `- プッシュブランチ: ${process.env.PUSH_BRANCH}`,
              `- パッチファイル: ${process.env.PATCH_FILE_PATH}`
            ].join('\n');

            await github.rest.pulls.create({
              owner,
              repo,
              title,
              head: process.env.PUSH_BRANCH,
              base: baseRef,
              body
            });
